// Number of nanoseconds since the UNIX epoch in UTC timezone.
type Timestamp = nat64;

// Number of nanoseconds between two [Timestamp]s.
type Duration = nat64;

type BlockIndex = nat;
type Subaccount = blob;

type Account = record {
    owner : principal;
    subaccount : opt Subaccount;
};

type Icrc1TransferArgs = record {
    from_subaccount : opt Subaccount;
    to : Account;
    amount : nat;
    fee : opt nat;
    memo : opt blob;
    created_at_time : opt Timestamp;
};

type Value = variant {
    Blob : blob;
    Text : text;
    Nat : nat;
    Nat64: nat64;
    Int : int;
    Array : vec Value;
    Map : vec record { text; Value };
};
type Block = Value;

type ICRC3Value = variant {
    Blob : blob;
    Text : text;
    Nat : nat;
    Int : int;
    Array : vec ICRC3Value;
    Map : vec record { text; ICRC3Value };
};

type Icrc3GetArchivesArgs = record {
    // The last archive seen by the client.
    // The Ledger will return archives coming
    // after this one if set, otherwise it
    // will return the first archives.
    from : opt principal;
};

type Icrc3GetArchivesResult = vec record {
    // The id of the archive
    canister_id : principal;

    // The first block in the archive
    start : nat;

    // The last block in the archive
    end : nat;
};

type GetBlocksArgs = record {
    // The index of the first block to fetch.
    start : BlockIndex;
    // Max number of blocks to fetch.
    length : nat;
};

type GetBlocksResult = record {
    // Total number of blocks in the
    // block log
    log_length : nat;

    blocks : vec record { id : nat; block: ICRC3Value };

    archived_blocks : vec record {
        args : vec GetBlocksArgs;
        callback : func (vec GetBlocksArgs) -> (GetBlocksResult) query;
    };
};

// The result of an "icrc3_get_blocks" call.
type Icrc3GetBlocksResponse = record {
    // The index of the first block in "blocks".
    // If the blocks vector is empty, the exact value of this field is not specified.
    first_index : BlockIndex;

    // The total number of blocks in the chain.
    // If the chain length is positive, the index of the last block is `chain_len - 1`.
    chain_length : nat64;

    // System certificate for the hash of the latest block in the chain.
    // Only present if `get_blocks` is called in a non-replicated query context.
    certificate : opt blob;

    // List of blocks that were available in the ledger when it processed the call.
    //
    // The blocks form a contiguous range, with the first block having index
    // [first_block_index] (see below), and the last block having index
    // [first_block_index] + len(blocks) - 1.
    //
    // The block range can be an arbitrary sub-range of the originally requested range.
    blocks : vec Block;

    // Encoding of instructions for fetching archived blocks.
    archived_blocks : vec record {
        // The index of the first archived block.
        start : BlockIndex;

        // The number of blocks that can be fetched.
        length : nat;

        // Callback to fetch the archived blocks.
        callback : QueryBlockArchiveFn;
    };
};

type TxIndex = nat;

type GetTransactionsRequest = record {
    // The index of the first tx to fetch.
    start : TxIndex;
    // The number of transactions to fetch.
    length : nat;
};

type GetTransactionsResponse = record {
    // The total number of transactions in the log.
    log_length : nat;

    // List of transaction that were available in the ledger when it processed the call.
    //
    // The transactions form a contiguous range, with the first transaction having index
    // [first_index] (see below), and the last transaction having index
    // [first_index] + len(transactions) - 1.
    //
    // The transaction range can be an arbitrary sub-range of the originally requested range.
    transactions : vec Transaction;

    // The index of the first transaction in [transactions].
    // If the transaction vector is empty, the exact value of this field is not specified.
    first_index : TxIndex;

    // Encoding of instructions for fetching archived transactions whose indices fall into the
    // requested range.
    //
    // For each entry `e` in [archived_transactions], `[e.from, e.from + len)` is a sub-range
    // of the originally requested transaction range.
    archived_transactions : vec record {
        // The index of the first archived transaction you can fetch using the [callback].
        start : TxIndex;

        // The number of transactions you can fetch using the callback.
        length : nat;

        // The function you should call to fetch the archived transactions.
        // The range of the transaction accessible using this function is given by [from]
        // and [len] fields above.
        callback : QueryArchiveFn;
    };
};

type Transaction = record {
  burn : opt Burn;
  kind : text;
  mint : opt Mint;
  approve : opt Approve;
  timestamp : Timestamp;
  transfer : opt Transfer;
};


// A prefix of the transaction range specified in the [GetTransactionsRequest] request.
type TransactionRange = record {
    // A prefix of the requested transaction range.
    // The index of the first transaction is equal to [GetTransactionsRequest.from].
    //
    // Note that the number of transactions might be less than the requested
    // [GetTransactionsRequest.length] for various reasons, for example:
    //
    // 1. The query might have hit the replica with an outdated state
    //    that doesn't have the whole range yet.
    // 2. The requested range is too large to fit into a single reply.
    //
    // NOTE: the list of transactions can be empty if:
    //
    // 1. [GetTransactionsRequest.length] was zero.
    // 2. [GetTransactionsRequest.from] was larger than the last transaction known to
    //    the canister.
    transactions : vec Transaction;
};

type Burn = record {
  from : Account;
  memo : opt blob;
  created_at_time : opt Timestamp;
  amount : nat;
  spender : opt Account;
};

type Mint = record {
  to : Account;
  memo : opt blob;
  created_at_time : opt Timestamp;
  amount : nat;
};

type Transfer = record {
  to : Account;
  fee : opt nat;
  from : Account;
  memo : opt blob;
  created_at_time : opt Timestamp;
  amount : nat;
  spender : opt Account;
};

type Approve = record {
  fee : opt nat;
  from : Account;
  memo : opt blob;
  created_at_time : opt Timestamp;
  amount : nat;
  expected_allowance : opt nat;
  expires_at : opt Timestamp;
  spender : Account;
};

// A function for fetching archived transaction.
type QueryArchiveFn = func (GetTransactionsRequest) -> (TransactionRange) query;

// A prefix of the block range specified in the [GetBlocksArgs] request.
type BlockRange = record {
    // A prefix of the requested block range.
    // The index of the first block is equal to [GetBlocksArgs.start].
    //
    // Note that the number of blocks might be less than the requested
    // [GetBlocksArgs.length] for various reasons, for example:
    //
    // 1. The query might have hit the replica with an outdated state
    //    that doesn't have the whole range yet.
    // 2. The requested range is too large to fit into a single reply.
    //
    // NOTE: the list of blocks can be empty if:
    //
    // 1. [GetBlocksArgs.length] was zero.
    // 2. [GetBlocksArgs.start] was larger than the last block known to
    //    the canister.
    blocks : vec Block;
};

// A function for fetching archived blocks.
type QueryBlockArchiveFn = func (GetBlocksArgs) -> (BlockRange) query;

// The result of a "get_blocks" call.
type GetBlocksResponse = record {
    // The index of the first block in "blocks".
    // If the blocks vector is empty, the exact value of this field is not specified.
    first_index : BlockIndex;

    // The total number of blocks in the chain.
    // If the chain length is positive, the index of the last block is `chain_len - 1`.
    chain_length : nat64;

    // System certificate for the hash of the latest block in the chain.
    // Only present if `get_blocks` is called in a non-replicated query context.
    certificate : opt blob;

    // List of blocks that were available in the ledger when it processed the call.
    //
    // The blocks form a contiguous range, with the first block having index
    // [first_block_index] (see below), and the last block having index
    // [first_block_index] + len(blocks) - 1.
    //
    // The block range can be an arbitrary sub-range of the originally requested range.
    blocks : vec Block;

    // Encoding of instructions for fetching archived blocks.
    archived_blocks : vec record {
        // The index of the first archived block.
        start : BlockIndex;

        // The number of blocks that can be fetched.
        length : nat;

        // Callback to fetch the archived blocks.
        callback : QueryBlockArchiveFn;
    };
};

// Certificate for the block at `block_index`.
type DataCertificate = record {
    certificate : opt blob;
    hash_tree : blob;
};

type Icrc3DataCertificate = record {
  // See https://internetcomputer.org/docs/current/references/ic-interface-spec#certification
  certificate : blob;

  // CBOR encoded hash_tree
  hash_tree : blob;
};

type TestMint = record {
    account: Account;
    amount: nat;
    memo: opt vec nat8;
};

type TransferError = variant {
    BadFee : record { expected_fee : nat };
    BadBurn : record { min_burn_amount : nat };
    InsufficientFunds : record { balance : nat };
    TooOld;
    CreatedInFuture: record { ledger_time : Timestamp };
    Duplicate : record { duplicate_of : nat };
    TemporarilyUnavailable;
    GenericError : record { error_code : nat; message : text };
};

type MetadataValue = variant {
    Nat : nat;
    Int : int;
    Text : text;
    Blob : blob;
};

type HeaderField = record {
    text;
    text;
};

type HttpRequest = record {
    method: text;
    url: text;
    headers: vec HeaderField;
    body: blob;
    certificate_version: opt nat16;
};

type HttpResponse = record {
    status_code: nat16;
    headers: vec HeaderField;
    body: blob;
    upgrade : opt bool;
};

type ResultString = variant { Ok: text; Err: text; };
type ResultData = variant { Ok: record { text; vec nat8 }; Err: text; };
type OfferingEntry = record {
    np_pub_key: vec nat8;
    offering_compressed: vec nat8;
};

service : {
    // Node Provider (NP) management operations
    // crypto_sig can be used to cryptographically verify the authenticity of the message
    node_provider_register: (pubkey_bytes: vec nat8, crypto_sig: vec nat8) -> (ResultString);
    node_provider_update_profile: (pubkey_bytes: vec nat8, profile_serialized: vec nat8, crypto_sig: vec nat8) -> (ResultString);
    node_provider_update_offering: (pubkey_bytes: vec nat8, offering_serialized: vec nat8, crypto_sig: vec nat8) -> (ResultString);
    node_provider_list_checked_in: () -> (ResultString) query;
    node_provider_get_profile_by_pubkey_bytes: (vec nat8) -> (opt text) query;
    node_provider_get_profile_by_principal: (principal) -> (opt text) query;
    offering_search: (search_query: text) -> (vec OfferingEntry) query;

    // Contract signing and replying
    contract_sign_request: (pubkey_bytes: vec nat8, contract_info_serialized: vec nat8, crypto_sig: vec nat8) -> (ResultString);
    contracts_list_pending: (pubkey_bytes: opt vec nat8) -> (vec record { vec nat8; vec nat8 }) query;
    contract_sign_reply: (pubkey_bytes: vec nat8, contract_reply_serialized: vec nat8, crypto_sig: vec nat8) -> (ResultString);
    // FIXME
    // contract_extend
    // contract_cancel

    // User management operations
    user_register: (pubkey_bytes: vec nat8, crypto_sig: vec nat8) -> (ResultString);

    // Check-in nonce that needs to be signed and sent for the check in
    // Provided here as a reference only, since client will instead use the nonce of the local ledger
    get_check_in_nonce: () -> (vec nat8) query;
    // Expected arguments:
    // - public key of the account (32B)
    // - memo, arbitrary text, up to 32B
    // - nonce_crypto_sig, cryptographic signature of the latest blockchain nonce
    node_provider_check_in: (pubkey_bytes: vec nat8, memo: text, nonce_crypto_sig: vec nat8) -> (ResultString);

    // Common NP and user management operations
    get_identity_reputation: (pubkey_bytes: vec nat8) -> (nat64) query;
    get_registration_fee: () -> (nat64) query;

    // Token and balances
    icrc1_metadata : () -> (vec record { text; MetadataValue; }) query;
    icrc1_name : () -> (text) query;
    icrc1_symbol : () -> (text) query;
    icrc1_decimals : () -> (nat8) query;
    icrc1_fee : () -> (nat) query;
    icrc1_total_supply : () -> (nat) query;
    icrc1_minting_account : () -> (opt Account) query;
    icrc1_balance_of : (Account) -> (nat) query;
    icrc1_transfer : (Icrc1TransferArgs) -> (variant { Ok : nat; Err : TransferError });
    icrc1_supported_standards : () -> (vec record { name : text; url : text }) query;
    icrc3_get_archives : (Icrc3GetArchivesArgs) -> (Icrc3GetArchivesResult) query;
    icrc3_get_tip_certificate : () -> (opt Icrc3DataCertificate) query;
    icrc3_get_blocks : (vec GetBlocksArgs) -> (Icrc3GetBlocksResponse) query;
    icrc3_supported_block_types : () -> (vec record { block_type : text; url : text }) query;
    // pre-icrc3
    get_transactions: (GetTransactionsRequest) -> (GetTransactionsResponse) query;
    get_blocks : (GetBlocksArgs) -> (GetBlocksResult) query;
    get_data_certificate : () -> (DataCertificate) query;

    // Synchronization (pushing and pulling) of the ledger data
    data_fetch: (cursor: opt text, bytes_before: opt vec nat8) -> (ResultData) query;
    data_push_auth: () -> (ResultString);
    data_push: (cursor: text, data: vec nat8) -> (ResultString);
    metadata: () -> (vec record { text; MetadataValue; }) query;

    // Debugging and troubleshooting
    http_request: (request: HttpRequest) -> (HttpResponse) query;
    get_logs_debug: () -> (ResultString) query;
    get_logs_info: () -> (ResultString) query;
    get_logs_warn: () -> (ResultString) query;
    get_logs_error: () -> (ResultString) query;
}
